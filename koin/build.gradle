apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
String applicationName = 'koin'
android {
    compileSdkVersion project.compileSdkVersion

    defaultConfig {
        applicationId "in.koreatech.koin"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 20208
        versionName "2.2.8"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file("./team_kap_android.jks")
            storePassword getPassword()
            keyAlias "koin_release_key"
            keyPassword getPassword()
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG", "true"
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_DEBUG", "false"
            signingConfig signingConfigs.release
        }
    }

//    flavorDimensions 'version'
//    productFlavors {
//        orginal {
//            dimension 'version'
//        }
//        admin {
//            dimension 'version'
//            applicationIdSuffix ".admin"
//            versionNameSuffix "-admin"
//        }
//    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${applicationName}_v${defaultConfig.versionName}_${variant.buildType.name}.apk"
        }
    }
}

def getPassword() {
    try {
        def stringsFile = file("./src/main/res/values/keys.xml")
        return new XmlParser().parse(stringsFile).string.find {
            it.@name.equals 'koin_store_password'
        }.text()
    } catch (e) {
        println(e)
        return ""
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':core')

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation(group: 'com.google.guava', name: 'guava', version: '24.1-jre') {
        exclude group: 'com.google.guava', module: 'failureaccess'
    }

    /* Dependency - glide */
    implementation project.glide
    annotationProcessor project.glideAnnotation

    /* Dependency - butterknife */
    implementation project.butterknife
    annotationProcessor project.butterknifeAnnotation

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') {
        transitive = true
    }

    //naver map
    implementation 'com.naver.maps:map-sdk:3.5.0'
    // https://github.com/irshuLx/Android-WYSIWYG-Editor
    implementation 'com.github.irshulx:laser-native-editor:3.0.4'
    implementation 'com.github.duanhong169:colorpicker:1.1.1'
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'



    testImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test:core:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.2.0'){
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    }

}
repositories {
    mavenCentral()
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'
